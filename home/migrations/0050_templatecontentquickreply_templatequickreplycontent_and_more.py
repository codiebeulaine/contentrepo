# Generated by Django 4.2.11 on 2024-03-14 10:50

import django.db.models.deletion
import modelcluster.contrib.taggit
import modelcluster.fields
import wagtail.blocks
import wagtail.fields
import wagtail.search.index
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ("wagtailcore", "0089_log_entry_data_json_null_to_object"),
        ("home", "0049_orderedcontentset_expire_at_and_more"),
    ]

    operations = [
        migrations.CreateModel(
            name="TemplateContentQuickReply",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "name",
                    models.CharField(max_length=100, unique=True, verbose_name="name"),
                ),
                (
                    "slug",
                    models.SlugField(
                        allow_unicode=True,
                        max_length=100,
                        unique=True,
                        verbose_name="slug",
                    ),
                ),
            ],
            options={
                "verbose_name": "quick reply2",
                "verbose_name_plural": "quick replie2",
            },
        ),
        migrations.CreateModel(
            name="TemplateQuickReplyContent",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="WhatsAppTemplate",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "live",
                    models.BooleanField(
                        default=True, editable=False, verbose_name="live"
                    ),
                ),
                (
                    "has_unpublished_changes",
                    models.BooleanField(
                        default=False,
                        editable=False,
                        verbose_name="has unpublished changes",
                    ),
                ),
                (
                    "first_published_at",
                    models.DateTimeField(
                        blank=True,
                        db_index=True,
                        null=True,
                        verbose_name="first published at",
                    ),
                ),
                (
                    "last_published_at",
                    models.DateTimeField(
                        editable=False, null=True, verbose_name="last published at"
                    ),
                ),
                (
                    "go_live_at",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="go live date/time"
                    ),
                ),
                (
                    "expire_at",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="expiry date/time"
                    ),
                ),
                (
                    "expired",
                    models.BooleanField(
                        default=False, editable=False, verbose_name="expired"
                    ),
                ),
                ("name", models.CharField(blank=True, default="", max_length=512)),
                (
                    "category",
                    models.CharField(
                        choices=[("MARKETING", "Marketing"), ("UTILITY", "Utility")],
                        default="UTILITY",
                        max_length=14,
                    ),
                ),
                (
                    "related_pages",
                    wagtail.fields.StreamField(
                        [("related_page", wagtail.blocks.PageChooserBlock())],
                        blank=True,
                        null=True,
                        use_json_field=True,
                    ),
                ),
                (
                    "message",
                    models.TextField(
                        help_text="each text message cannot exceed 4096 characters, messages with media cannot exceed 1024 characters.",
                        max_length=4096,
                    ),
                ),
                (
                    "latest_revision",
                    models.ForeignKey(
                        blank=True,
                        editable=False,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to="wagtailcore.revision",
                        verbose_name="latest revision",
                    ),
                ),
                (
                    "live_revision",
                    models.ForeignKey(
                        blank=True,
                        editable=False,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to="wagtailcore.revision",
                        verbose_name="live revision",
                    ),
                ),
                (
                    "locale",
                    models.ForeignKey(
                        default="",
                        on_delete=django.db.models.deletion.CASCADE,
                        to="wagtailcore.locale",
                    ),
                ),
                (
                    "quick_replies",
                    modelcluster.contrib.taggit.ClusterTaggableManager(
                        blank=True,
                        help_text="A comma-separated list of tags.",
                        through="home.TemplateQuickReplyContent",
                        to="home.TemplateContentQuickReply",
                        verbose_name="Tags",
                    ),
                ),
            ],
            options={
                "verbose_name": "WhatsApp Template",
                "verbose_name_plural": "WhatsApp Templates",
            },
            bases=(wagtail.search.index.Indexed, models.Model),
        ),
        migrations.AddField(
            model_name="templatequickreplycontent",
            name="content_object",
            field=modelcluster.fields.ParentalKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="template_quick_reply_items",
                to="home.whatsapptemplate",
            ),
        ),
        migrations.AddField(
            model_name="templatequickreplycontent",
            name="tag",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="template_quick_reply_content",
                to="home.templatecontentquickreply",
            ),
        ),
    ]
