# Generated by Django 4.2.11 on 2024-04-03 13:46

from django.db import migrations, models
import django.db.models.deletion
import modelcluster.contrib.taggit
import modelcluster.fields
import wagtail.blocks
import wagtail.fields
import wagtail.search.index


class Migration(migrations.Migration):

    dependencies = [
        ("wagtailcore", "0089_log_entry_data_json_null_to_object"),
        ("taggit", "0005_auto_20220424_2025"),
        ("home", "0052_templatecontentquickreply_templatequickreplycontent_and_more"),
    ]

    operations = [
        migrations.CreateModel(
            name="Assessment",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "live",
                    models.BooleanField(
                        default=True, editable=False, verbose_name="live"
                    ),
                ),
                (
                    "has_unpublished_changes",
                    models.BooleanField(
                        default=False,
                        editable=False,
                        verbose_name="has unpublished changes",
                    ),
                ),
                (
                    "first_published_at",
                    models.DateTimeField(
                        blank=True,
                        db_index=True,
                        null=True,
                        verbose_name="first published at",
                    ),
                ),
                (
                    "last_published_at",
                    models.DateTimeField(
                        editable=False, null=True, verbose_name="last published at"
                    ),
                ),
                (
                    "go_live_at",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="go live date/time"
                    ),
                ),
                (
                    "expire_at",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="expiry date/time"
                    ),
                ),
                (
                    "expired",
                    models.BooleanField(
                        default=False, editable=False, verbose_name="expired"
                    ),
                ),
                ("title", models.CharField(max_length=255)),
                (
                    "slug",
                    models.SlugField(
                        help_text="A unique identifier for this assessment",
                        max_length=255,
                    ),
                ),
                (
                    "high_inflection",
                    models.FloatField(
                        help_text="Any score equal to or above this amount is considered high"
                    ),
                ),
                (
                    "medium_inflection",
                    models.FloatField(
                        help_text="Any score equal to or above this amount, but lower than the high inflection, is considered medium. Any score below this amount is considered low"
                    ),
                ),
                (
                    "generic_error",
                    models.TextField(
                        help_text="If no error is specified for a question, then this is used as the fallback"
                    ),
                ),
                (
                    "questions",
                    wagtail.fields.StreamField(
                        [
                            (
                                "question",
                                wagtail.blocks.StructBlock(
                                    [
                                        (
                                            "question",
                                            wagtail.blocks.TextBlock(
                                                help_text="The question to ask the user"
                                            ),
                                        ),
                                        (
                                            "error",
                                            wagtail.blocks.TextBlock(
                                                help_text="Error message for this question if we don't understand the input",
                                                required=False,
                                            ),
                                        ),
                                        (
                                            "answers",
                                            wagtail.blocks.ListBlock(
                                                wagtail.blocks.StructBlock(
                                                    [
                                                        (
                                                            "answer",
                                                            wagtail.blocks.TextBlock(
                                                                help_text="The choice shown to the user for this option"
                                                            ),
                                                        ),
                                                        (
                                                            "score",
                                                            wagtail.blocks.FloatBlock(
                                                                help_text="How much to add to the total score if this answer is chosen"
                                                            ),
                                                        ),
                                                    ]
                                                )
                                            ),
                                        ),
                                    ]
                                ),
                            )
                        ],
                        use_json_field=True,
                    ),
                ),
                (
                    "high_result_page",
                    models.ForeignKey(
                        help_text="The page to show the user if they score high",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="assessment_high",
                        to="home.contentpage",
                    ),
                ),
                (
                    "latest_revision",
                    models.ForeignKey(
                        blank=True,
                        editable=False,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to="wagtailcore.revision",
                        verbose_name="latest revision",
                    ),
                ),
                (
                    "live_revision",
                    models.ForeignKey(
                        blank=True,
                        editable=False,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to="wagtailcore.revision",
                        verbose_name="live revision",
                    ),
                ),
                (
                    "locale",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="wagtailcore.locale",
                    ),
                ),
                (
                    "low_result_page",
                    models.ForeignKey(
                        help_text="The page to show the user if they score low",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="assessment_low",
                        to="home.contentpage",
                    ),
                ),
                (
                    "medium_result_page",
                    models.ForeignKey(
                        help_text="The page to show the user if they score medium",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="assessment_medium",
                        to="home.contentpage",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
            bases=(wagtail.search.index.Indexed, models.Model),
        ),
        migrations.CreateModel(
            name="AssessmentTag",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "content_object",
                    modelcluster.fields.ParentalKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="tagged_items",
                        to="home.assessment",
                    ),
                ),
                (
                    "tag",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="%(app_label)s_%(class)s_items",
                        to="taggit.tag",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.AddField(
            model_name="assessment",
            name="tags",
            field=modelcluster.contrib.taggit.ClusterTaggableManager(
                blank=True,
                help_text="A comma-separated list of tags.",
                through="home.AssessmentTag",
                to="taggit.Tag",
                verbose_name="Tags",
            ),
        ),
    ]
